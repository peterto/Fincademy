<div id="myExcelDiv" style="width: 261px; height: 210px"></div>
<script type="text/javascript" src="http://r.office.microsoft.com/r/rlidExcelWLJS?v=1&kip=1"></script>
<script type="text/javascript">
  /*
   * This code uses the Microsoft Office Excel Javascript object model to programmatically insert the
   * Excel Web App into a div with id=myExcelDiv. The full API is documented at
   * http://msdn.microsoft.com/en-US/library/hh315812.aspx. There you can find out how to programmatically get
   * values from your Excel file and how to use the rest of the object model. 
   */

  // Use this file token to reference document.xlsx in Excel's APIs
  var fileToken = "SD9A38AA61D3C6E28C!107/-7333924656031276404/t=0&s=0&v=!ABEATYmw6WIgbIs";

  // run the Excel load handler on page load
  if (window.attachEvent) {
    window.attachEvent("onload", loadEwaOnPageLoad);
  } else {
    window.addEventListener("DOMContentLoaded", loadEwaOnPageLoad, false);
  }

  function loadEwaOnPageLoad() {
    var props = {
      item: "'Sheet1'!A1:D9",
      uiOptions: {
        showDownloadButton: false,
        showParametersTaskPane: false
      },
      interactivityOptions: {
        allowTypingAndFormulaEntry: true,
        allowParameterModification: false,
        allowSorting: false,
        allowFiltering: false,
        allowPivotTableInteractivity: false
      }
    };

    Ewa.EwaControl.loadEwaAsync(fileToken, "myExcelDiv", props, onEwaLoaded);
  }

  function onEwaLoaded(asyncResult)
    { 
        if (asyncResult.getSucceeded())
        {
            // Use the AsyncResult.getEwaControl() method to get a reference to the EwaControl object
            ewa = asyncResult.getEwaControl();
            ewa.add_activeCellChanged(cellChanged);
        }
        else
        {
            alert("Async operation failed!");
        }
        // ...
    }


    
  function recalcAsyncCallback(asyncResult) {
    // Get the value from asyncResult if the asynchronous operation was successful.
      if (asyncResult.getCode() == 0)
      {
          // Display recalculate success message.
          window.status = "Workbook recalculation successful!";
      }
      else 
      {
           alert("Operation failed with error message " + asyncResult.getDescription() + ".");
      }    
  }
  var ewa = null;
 
  // Add event handler for onload event.
  if (window.attachEvent) 
  { 
      window.attachEvent("onload", ewaOnPageLoad);    
  } 
  else 
  { 
      window.addEventListener("DOMContentLoaded", ewaOnPageLoad, false); 
  }

  // Add event handler for applicationReady event.
  function ewaOnPageLoad() 
  { 
    Ewa.EwaControl.add_applicationReady(onApplicationReady); 
  } 

  function onApplicationReady()
  {        
      // Get a reference to the Excel Services Web Part.
      ewa = Ewa.EwaControl.getInstances().getItem(0);                                     
  }  

  function refreshAllAsyncButton()
  {
      // Refresh all data connections.
      ewa.getActiveWorkbook().refreshAllAsync(refreshAllAsyncCallBack);
  }     

  function refreshAllAsyncCallBack(asyncResult)
  {
      // Get the value from asyncResult if the asynchronous operation was successful.
      if (asyncResult.getCode() == 0)
      {
          // Display refresh success message.
          window.status = "Data connection refresh successful!";
      }
      else 
      {
           alert("Operation failed with error message " + asyncResult.getDescription() + ".");
      }    
  } 

  function execute() {
    //Note: In SharePoint, it may also make sense to pair this call with
    //ewa.getActiveWorkbook().refreshAllAsync(refreshCallback);
    
    //Recalculate the workbook
    // ewa.getActiveWorkbook().recalcAsync(recalcAsyncCallback);
    ewa.getActiveWorkbook().getActiveCell().getValuesAsync(1,getRangeValues,null);

  }
  function getRangeValues(asyncResult)
  {
    // Get the value from asyncResult if the asynchronous operation was successful.
    if (asyncResult.getCode() == 0)
    {
        // Get the value in active cell (located at row 0, column 0 of the
        // range which consists of a single cell (the "active cell")).
        alert("Result: " + asyncResult.getReturnValue()[0][0]);
    }
    else 
    {
          alert("Operation failed with error message " + asyncResult.getDescription() + ".");
    }    
  }
  alerting = function () {
    ewa.getActiveWorkbook().getActiveCell().getValuesAsync(1,getRangeValues,null);
    // alert("hello");
    // alert(ewa.getActiveWorkbook().getActiveCell().getValuesAsync(1,getRangeValues,null));
    // alert(ewa.getActiveWorkbook().getActiveCell().getAddressA1());
    alert(ewa.getActiveWorkbook().getActiveCell().getAddressA1());
    
    // alert(execute());
    // alert(execute());

    // preventDefault();
}
</script>